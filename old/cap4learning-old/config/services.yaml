# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: '%env(LANGUAGE_DEFAULT)%'
    locale_list: ['fr', 'en']
    MAILER_SENDER: '%env(MAILER_SENDER)%'
    MAILER_RECEIVER: '%env(MAILER_RECEIVER)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    app.menu_builder:
        class: App\Menu\Builder
        arguments: [ "@knp_menu.factory" ]
        tags:
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: main }
            - { name: knp_menu.menu_builder, method: createSecondaryMenu, alias: secondary }
            - { name: knp_menu.menu_builder, method: createFooterMenu, alias: footer }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # ADMINS DEFINITION
    admin.news:
        class: App\Admin\NewsAdmin
        arguments: [ ~, App\Entity\News, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: News, group: Content }

    admin.contact:
        class: App\Admin\ContactAdmin
        arguments: [ ~, App\Entity\Contact, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Contact, group: Content }

    admin.page:
        class: App\Admin\PageAdmin
        arguments: [ ~, App\Entity\Page, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Page, group: Content }

    admin.training:
        class: App\Admin\TrainingAdmin
        arguments: [ ~, App\Entity\Training, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Training, group: Content }

    admin.training_category:
        class: App\Admin\TrainingCategoryAdmin
        arguments: [ ~, App\Entity\TrainingCategory, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Training Category, group: Content }

    admin.paragraph:
        class: App\Admin\ParagraphAdmin
        arguments: [ ~, App\Entity\Paragraph, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Paragraph, group: Content }

    admin.module:
        class: App\Admin\ModuleAdmin
        arguments: [ ~, App\Entity\Module, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Module, group: Content }

    admin.session:
        class: App\Admin\TrainingSessionAdmin
        arguments: [ ~, App\Entity\TrainingSession, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, label: TrainingSession, group: Content }

    # MANAGERS DEFINITION

    App\Manager\TrainingManager:
        $class: '\App\Entity\Training'

    App\Manager\TrainingCategoryManager:
        $class: '\App\Entity\TrainingCategory'

    App\Manager\PageManager:
        $class: '\App\Entity\Page'

    App\Manager\NewsManager:
        $class: '\App\Entity\News'

    App\Manager\ParagraphManager:
        $class: '\App\Entity\Paragraph'

    App\Manager\ContactManager:
        $class: '\App\Entity\Contact'

